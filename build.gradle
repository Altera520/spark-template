buildscript {
    ext {
        gradleShadowPluginVersion = '7.1.2'
        gradleAvroPluginVersion = '1.2.0'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
//        mavenCentral()
//        gradlePluginPortal()
    }

    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:${gradleShadowPluginVersion}"
//        classpath "com.github.davidmc24.gradle.plugin:gradle-avro-plugin:${gradleAvroPluginVersion}"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'scala'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenCentral()
    }

    ext.getVersionWithoutPatch = { version ->
        return version.split("\\.")[0, 1].join(".")
    }

    ext {
        // spark
        sparkVersion = "3.3.0"
        scalaVersion = "2.13.8"
        scalaVerisonWithoutPatch = getVersionWithoutPatch scalaVersion

        // logging
        slf4jVersion = "1.7.30"
        log4jVersion = "2.16.0"

        // test
        scalaTestVersion = "3.2.14"
        junitVersion = "5.7.0"

        // util
        pureconfigVersion = "0.17.1"
    }

    dependencies {
        implementation("org.apache.commons:commons-lang3:3.12.0")
        implementation("com.github.pureconfig:pureconfig_${scalaVerisonWithoutPatch}:${pureconfigVersion}")
        implementation("org.scala-lang:scala-library:${scalaVersion}")

        testImplementation("org.scalatest:scalatest_${scalaVerisonWithoutPatch}:${scalaTestVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
        testRuntimeOnly("co.helmethair:scalatest-junit-runner:0.1.8")
    }
}

subprojects {
    // gradle wrapper config
    wrapper {
        gradleVersion = '7.1'
    }

    test {
        useJUnitPlatform {
            includeEngines 'scalatest'
            testLogging {
                events("passed", "skipped", "failed")
            }
        }
        filter {
            includeTestsMatching "*Spec"
        }
    }
}